#!/bin/bash

# Get the name of the current directory
PROJECT_DIR="$PWD"
REPO_NAME=$(basename "$PROJECT_DIR")

# Step 1: Navigate into the project directory (optional if running in the project directory)
echo "Navigating into project directory..."
cd "$PROJECT_DIR" || exit

# Step 2: Remove old node modules
echo "Cleaning up old node modules..."
rm -rf node_modules

# Step 3: Create or update .gitignore file with specific entries
echo "Creating or updating .gitignore file..."
cat <<EOL > .gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
EOL

# Step 4: Initialize Git repository if not initialized
echo "Initializing Git repository..."
if [ ! -d .git ]; then
    git init
    echo "Git repository initialized."
    echo "Adding remote repository..."
    gh repo create "$REPO_NAME" --public
    if [ $? -eq 0 ]; then
        echo "Remote repository created successfully."
        git remote add origin git@github.com:Jonnii_Ringo/"$REPO_NAME".git
        if [ $? -eq 0 ]; then
            echo "Remote repository added successfully."
        else
            echo "Failed to add remote repository."
            exit 1
        fi
    else
        echo "Failed to create remote repository."
        exit 1
    fi
else
    echo "Git repository already initialized."
fi

# Step 5: Install or update dependencies

# Install React and React-DOM explicitly
npm install react react-dom

echo "Installing or updating dependencies..."
npm install

# Step 6: Add and commit initial changes
echo "Adding and committing initial changes to Git..."
git add .
git commit -m "Initial commit with updated dependencies and setup"

# Step 7: Push changes to remote repository (if applicable)
echo "Pushing changes to remote repository..."
git push -u origin main

# Wait for the push to complete
while ! git ls-remote --exit-code origin &> /dev/null; do
    echo "Waiting for push to complete..."
    sleep 5
done

# Step 8: Start the development server
echo "Starting React development server..."
npm run dev

echo "Project setup complete. Your project is running!"
